name: Fedora 35 / Qt 6

on:
  push:
    paths-ignore:
    - scripts/docker/**
    branches:
    - master
  pull_request:
    paths-ignore:
    - scripts/docker/**
    branches:
    - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: fedora:35

    steps:
    - name: get container ready for build
      run: |
        echo "--------------------------------------------------------------"
        echo "update distro and install dependencies"

        dnf update -y
        dnf install -y autoconf automake bluez-libs-devel cmake gcc-c++ git-core \
        libcurl-devel libsqlite3x-devel libssh2-devel libtool libudev-devel \
        libusbx-devel libxml2-devel libxslt-devel make \
        qt6-qtbase-devel qt6-qtconnectivity-devel qt6-qtdeclarative-devel \
        qt6-qtlocation-devel qt6-qtsvg-devel \
        qt6-qttools-devel redhat-rpm-config \
        libxkbcommon-devel qt6-qt5compat-devel \
        bluez-libs-devel libgit2-devel libzip-devel libmtp-devel LibRaw-devel \
        xorg-x11-server-Xvfb

    - name: checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: set the version information
      id: version_number
      uses: ./.github/actions/manage-version
      with:
        no-increment: true

    - name: build Subsurface
      run: |
        echo "--------------------------------------------------------------"
        echo "building desktop"

        BUILD_EXTRA_ARGS=""
        if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
          echo "Building a release version"
          BUILD_EXTRA_ARGS="${BUILD_EXTRA_ARGS} -release"
        fi

        # now build for the desktop version (without WebKit)
        cd ..
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --add safe.directory $GITHUB_WORKSPACE/libdivecomputer
        git config --global --get-all safe.directory
        bash -e -x subsurface/scripts/build.sh -desktop -build-with-qt6 -build-tests ${BUILD_EXTRA_ARGS}

    - name: test desktop build
      run: |
        echo "--------------------------------------------------------------"
        echo "running tests for desktop"
        cd build/tests
        xvfb-run --auto-servernum make check
        if [ $? -ne 0 ]; then
          echo "Tests failed - adding the build output as artifacts"
          exit 1
        fi

    - name: upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-output-${{ steps.version_number.outputs.version }}
        path: |
          build/tests/
          !build/tests/CMakeFiles/
          !build/tests/Test*
          build/tests/Testing/
